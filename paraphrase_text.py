# -*- coding: utf-8 -*-
"""paraphrase_text.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_t6IaPPvnyjE6rpx8FQglrWfDN0byYF9
"""

# !pip install sentence-splitter

# !pip install transformers

# !pip install sentencepiece

import torch
from transformers import PegasusForConditionalGeneration, PegasusTokenizer
model_name = 'tuner007/pegasus_paraphrase'
torch_device = 'cuda' if torch.cuda.is_available() else 'cpu'
tokenizer = PegasusTokenizer.from_pretrained(model_name)
model = PegasusForConditionalGeneration.from_pretrained(model_name).to(torch_device)

def get_response(input_text,num_return_sequences,num_beams):
  batch = tokenizer([input_text],truncation=True,padding='longest',max_length=60, return_tensors="pt").to(torch_device)
  translated = model.generate(**batch,max_length=60,num_beams=num_beams, num_return_sequences=num_return_sequences, temperature=1.5)
  tgt_text = tokenizer.batch_decode(translated, skip_special_tokens=True)
  return tgt_text

text = "Learning is the process of acquiring new understanding, knowledge, behaviors, skills, values, attitudes, and preferences."

get_response(text, 5, 5)

context = "I actively incorporate DevOps and proper system architecture during the software development life cycle to help build these scalable, agile and portable applications."

from sentence_splitter import SentenceSplitter, split_text_into_sentences

splitter = SentenceSplitter(language="en")

sentence_list = splitter.split(context)
sentence_list

paraphrase = []

for sentence in sentence_list:
  a = get_response(sentence, 1, 1)
  paraphrase.append(a)

paraphrase

paraphrase2 = [' '.join(x) for x in paraphrase]
paraphrase2

paraphrase3 = [' '.join(x for x in paraphrase2)]
paraphrase_text = str(paraphrase3).strip('[]').strip("''")
paraphrase_text

print(context)
print(paraphrase_text)